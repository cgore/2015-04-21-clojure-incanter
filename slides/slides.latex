% Copyright (c) 2015, Christopher Mark Gore,
% Soli Deo Gloria,
% All rights reserved.
%
% 2317 South River Road, Saint Charles, Missouri 63303 USA.
% Web: http://cgore.com
% Email: cgore@cgore.com
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%
%     * Neither the name of Christopher Mark Gore nor the names of other
%       contributors may be used to endorse or promote products derived from
%       this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

\documentclass{seminar}

\usepackage{fixltx2e} % Bugfixes for LaTeX 2e
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage[normalem]{ulem}
\usepackage{graphicx}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{librebaskerville} % Baskerville font
\usepackage{amsfonts}
\usepackage{listings}
\usepackage[dvips]{pstricks}
\usepackage{relsize}
\usepackage{textcomp}
\usepackage[normalem]{ulem}
\usepackage{wasysym}


\usepackage{semcolor,slidesec}
\input{seminar.bug}
\input{seminar.bg2}
% \input{seminar.bg3} % TODO: why is this missing on OSX?

\definecolor{fillcolor}{rgb}{0.9,0.95,1.0}
\definecolor{linecolor}{rgb}{0.8,0.85,0.9}
\slideframe[\psset{fillcolor=fillcolor,linecolor=linecolor}]{scshadow}

\newcommand{\hc}{Blue}
\newcommand{\h}[1]{\slideheading{\textcolor{\hc}{#1}}}
\newcommand{\tq}[1]{\textcolor{Green}{\textbf{#1}}}
\newcommand{\tbd}[1]{\textcolor{Blue}{\textit{#1}}}
\newcommand{\TODO}{{\Huge \textcolor{Red}{\textbf{{TO DO}}}}}

\definecolor{commentcolor}{rgb}{0.1,0.1,0.8}
\definecolor{identifiercolor}{rgb}{0.2,0.2,0.2}
\definecolor{keywordcolor}{rgb}{0.1,0.3,0.1}
\definecolor{cexcolor}{rgb}{0.25,0.25,0.4}
\lstset{
  basicstyle=\small\ttfamily,
  language=Lisp,
  morekeywords={make-instance},
  escapeinside={\%*}{*)},
  commentstyle=\itshape\color{commentcolor},
  identifierstyle=\color{identifiercolor},
  keywordstyle=\color{keywordcolor},
  upquote=true
}
\newcommand{\cex}[1]{\textcolor{cexcolor}{\textit{#1}}}

\newcommand{\fullSlideImage}[1]{
  \begin{center}
    \includegraphics[width=4in,height=2.5in,keepaspectratio=true]{#1}
  \end{center}
}

\title{\psshadowbox{Clojure Incanter}}
\author{Christopher Mark Gore\\
  \texttt{cgore.com}}
\date{Tuesday, April 28, {\smaller AD} 2015} % textsc doesn't seem to work for Baskerville.

\begin{document}

\raggedslides[0mm]


\begin{slide}
  \color{\hc}

  \begin{center}
    \includegraphics[height=1.25in]{STLClojure.eps}
  \end{center}

  \maketitle

  \color{Black}
\end{slide}


\begin{slide}
  \h{Why Incanter?}

  \begin{itemize}
  \item charts
  \item statistics
  \item data
  \item graphics
  \item don't have to use R or MATLAB!
  \end{itemize}
\end{slide}


\begin{slide}
  \h{Getting Started: Your \texttt{project.clj}}

\begin{lstlisting}
:dependencies [... [incanter "1.5.6"] ...]
\end{lstlisting}

  \h{Getting Started: Your Namespace Declaration}

\begin{lstlisting}
(ns code.core
  "Howdy Incanter!"
  (:require [incanter.core :as i
             :refer [$ $order $rollup $where conj-cols
                     conj-rows dataset dim save
                     to-dataset view]
            [incanter.datasets :as ids]
            [incanter.stats :as is]
            [incanter.charts :as ic]
            [incanter.io :as iio
                         :refer [read-dataset]]))
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Sine Waves}

  The first thing I try to do with any plotting system is a simple sine wave.
  If a plotting library can't easily do that, it's outclassed by a cheap
  calculator for junior-high school students.

  \begin{center}
    \includegraphics[height=2in]{ti-83-plus.eps}
  \end{center}
\end{slide}


\begin{slide}
  \h{Sine Waves}

\begin{lstlisting}
(view (ic/function-plot #(Math/sin %) -4 4
                        :y-label "sin(x)"))
\end{lstlisting}

  \begin{center}
    \includegraphics[height=2in]{sine-wave.eps}
  \end{center}
\end{slide}


\begin{slide}
  \h{Data Sets}

  You probably want to look at data if you are interested in Incanter.
  For a really small data set, you might just define it inline.

\begin{lstlisting}
(def small-data (dataset ["x" "y" "theta"]
                          [[1   2   3]
                           [4   5   6]
                           [7   8   9]]))
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Data Sets from CSVs}

  If you are working with a real data set, then it's probably living in a CSV
  file or a database.

\begin{lstlisting}
(def pass-data (read-dataset "../Pass.csv"
                             :header true))
(def fail-data (read-dataset "../Pass.csv"
                             :header true))
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Data Sets from Hash Maps}

  Clojure \emph{loves} hash maps.
  How do you make a data set out of them?

\begin{lstlisting}
(def data-from-hashmaps (to-dataset [{:x 1 :y 2}
                                     {:x 3 :y 4}
                                     {:x 5 :y 6}]))
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Data Sets from Vectors}

\begin{lstlisting}
(def data-from-vecs (to-dataset [[1 2 3]
                                 [4 5 6]
                                 [7 8 9]]))
(def data-cols (conj-cols [1 4 7]
                          [2 5 8]
                          [3 6 9]))
(def data-rows (conj-rows [1 2 3]
                          [4 5 6]
                          [7 8 9]))
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Data Sets from the Internet}

  There's no need to download the CSV, if you know the path to it.

\begin{lstlisting}
(def air-passengers
  (read-dataset
   (str "http://vincentarelbundock.github.io"
        "/Rdatasets/csv/datasets/AirPassengers.csv")
   :header true))
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Included Sample Data Sets}

  Incanter has a lot of sample data sets included, mostly borrowed from R.
  Standard data sets are commonly used if you need to test out an algorithm, or
  compare it to existing algorithms.

\begin{lstlisting}
(def hec (ids/get-dataset :hair-eye-color))
\end{lstlisting}

  $$\left( \begin{array}{cccc}
    :hair  & :eye   & :gender & :count \\
    black  & brown  & male    & 32 \\
    black  & blue   & male    & 11 \\
    \vdots & \vdots & \vdots  & \vdots \\
  \end{array}\right)$$
\end{slide}


\begin{slide}
  \h{Saving Data Sets}

  Incanter provides an easy way to save your data sets to CSV files for use in
  other tools.

\begin{lstlisting}
(save some-data "some.csv") 
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{The \texttt{\$} Operator}

  The \texttt{\$} operator is a shortcut to get that column of data out of a dataset.

\begin{lstlisting}
(defn x [dataset]
  ($ :x dataset))
(defn y [dataset]
  ($ :y dataset))
(defn theta [dataset]
  ($ :theta dataset))
(defn mpi [dataset]
  ($ (keyword "Monthly Personal Income") dataset))
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Multiple Columns with the \texttt{\$} Operator}

  To select a few columns:
\begin{lstlisting}
($ ["x" "y"] small-data)
\end{lstlisting}

  To remove one of the columns:
\begin{lstlisting}
($ [:not "theta"] small-data)
\end{lstlisting}

  Both produce:

  $$\left( \begin{array}{cc}
    x & y \\
    1 & 2 \\
    4 & 5 \\
    7 & 8 \\
  \end{array}\right)$$
\end{slide}


\begin{slide}
  \h{Single Rows with the \texttt{\$} Operator}

  We can select a few columns:
\begin{lstlisting}
($ ["x" "y"] small-data)
\end{lstlisting}

  $$\left( \begin{array}{cc}
    x & y \\
    1 & 2 \\
    4 & 5 \\
    7 & 8 \\
  \end{array}\right)$$

  And then select a single row, zero-indexed:
\begin{lstlisting}
($ 1 ["x" "y"] small-data) ; Returns '(4 5)
\end{lstlisting}

\end{slide}


\begin{slide}
  \h{The \texttt{\$where} Operator}

\begin{lstlisting}
($where {:hair "red"} hec) ; Only with red hair
\end{lstlisting}

  $$\left( \begin{array}{cccc}
  :hair &  :eye & :gender & :count \\
  red & brown &    male &     10 \\
  red &  blue &    male &     10 \\
  red & hazel &    male &      7 \\
  red & green &    male &      7 \\
  red & brown &  female &     16 \\
  red &  blue &  female &      7 \\
  red & hazel &  female &      7 \\
  red & green &  female &      7 \\
  \end{array}\right)$$
\end{slide}


\begin{slide}
  \h{The \texttt{\$where} Operator}

\begin{lstlisting}
($where {:count {:lt 5}} hec) ; only small samples
\end{lstlisting}

  $$\left( \begin{array}{cccc}
     :hair &  :eye & :gender & :count \\
     black & green &    male &      3 \\
     blond & brown &    male &      3 \\
     black & green &  female &      2 \\
     blond & brown &  female &      4 \\
  \end{array}\right)$$
\end{slide}


\begin{slide}
  \h{The \texttt{\$where} Operator}

\begin{lstlisting}
($where (fn [row] ; We can do any function we want.
          (and (= (row :hair) "blond")
               (= (row :eye) "blue")))
        hec)
\end{lstlisting}

  $$\left( \begin{array}{cccc}
      :hair & :eye & :gender & :count \\
      blond & blue &    male &     30 \\
      blond & blue &  female &     64 \\
  \end{array}\right)$$
\end{slide}


\begin{slide}
  \h{The \texttt{\$order} Operator}

\begin{lstlisting}
($order :count :desc hec)
\end{lstlisting}

  $$\left( \begin{array}{cccc}
    :hair  &  :eye  & :gender & :count \\
    brown  & brown  &  female &     66 \\
    blond  &  blue  &  female &     64 \\
    brown  & brown  &    male &     53 \\
    brown  &  blue  &    male &     50 \\
    black  & brown  &  female &     36 \\
    brown  &  blue  &  female &     34 \\
    black  & brown  &    male &     32 \\
    blond  &  blue  &    male &     30 \\
    \vdots & \vdots & \vdots  & \vdots \\
  \end{array}\right)$$
\end{slide}


\begin{slide}
  \h{The \texttt{\$rollup} Operator}

\begin{lstlisting}
($rollup i/sum :count [:hair :eye] hec)
\end{lstlisting}

  $$\left( \begin{array}{ccc}
     :eye  & :hair  & :count \\
    hazel  & brown  &   54.0 \\
    brown  & blond  &    7.0 \\
    green  &   red  &   14.0 \\
    brown  &   red  &   26.0 \\
    hazel  &   red  &   14.0 \\
     blue  &   red  &   17.0 \\
     blue  & blond  &   94.0 \\
    green  & black  &    5.0 \\
    \vdots & \vdots & \vdots \\
  \end{array}\right)$$
\end{slide}


\begin{slide}
  \h{Combining Operators}

\begin{lstlisting}
($order :count :desc
        ($rollup i/sum :count [:hair :eye] hec))
\end{lstlisting}

  $$\left( \begin{array}{ccc}
     :eye  & :hair  & :count \\
    brown  & brown  &  119.0 \\
     blue  & blond  &   94.0 \\
     blue  & brown  &   84.0 \\
    brown  & black  &   68.0 \\
    hazel  & brown  &   54.0 \\
    green  & brown  &   29.0 \\
    \vdots & \vdots & \vdots \\
  \end{array}\right)$$
\end{slide}


\begin{slide}
  \h{Statistics}

  There is a lot of statistics available.
  Some of the basics:

\begin{lstlisting}
(def mpi-stats {:mean (is/mean mpi-filtered)
                :variance (is/variance mpi-filtered)
                :std-dev (is/sd mpi-filtered)
                :median (is/median mpi-filtered)
                :kurtosis (is/kurtosis mpi-filtered)})
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Histograms}

\begin{lstlisting}
(let [mpi-filtered (filter #(< 0 %) (mpi pass-data))
      mpi-log10 (map #(Math/log10 %) mpi-filtered)]
  (view (ic/histogram mpi-log10
                      :x-label "Monthly Personal Income"
                      :nbins 50)))
\end{lstlisting}

  \begin{center}
    \includegraphics[height=1.5in]{histogram.eps}
  \end{center}
\end{slide}


\begin{slide}
  \h{Scatter Plots}

\begin{lstlisting}
(i/with-data (ids/get-dataset :iris)
  (view (ic/scatter-plot :Sepal.Length :Sepal.Width
                         :group-by :Species)))
\end{lstlisting}

  \begin{center}
    \includegraphics[height=1.5in]{scatter-plot.eps}
  \end{center}
\end{slide}


\begin{slide}
  \h{Bar Charts}

\begin{lstlisting}
(i/with-data (ids/get-dataset :co2)
  (view (ic/bar-chart :Type :uptake
                      :title "CO2 Uptake"
                      :group-by :Treatment
                      :x-label "Grass Types"
                      :y-label "Uptake"
                      :legend true)))
\end{lstlisting}

  \begin{center}
    \includegraphics[height=1.3in]{co2-uptake-bar-chart.eps}
  \end{center}
\end{slide}


\begin{slide}
  \h{Line Charts}

\begin{lstlisting}
(i/with-data ($rollup i/sum :count [:hair :eye] hec)
  (view (ic/line-chart :hair :count)))
\end{lstlisting}

  \begin{center}
    \includegraphics[height=1.7in]{line-chart.eps}
  \end{center}
\end{slide}


\begin{slide}
  \h{And there's a lot more I didn't mention!}
\end{slide}


\begin{slide}
  \begin{center}
    \textcolor{\hc}{\textbf{\emph{\Huge{Questions?}}}}
  \end{center}
\end{slide}


\end{document}
